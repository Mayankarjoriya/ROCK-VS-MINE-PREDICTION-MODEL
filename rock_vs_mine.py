# -*- coding: utf-8 -*-
# """rock vs mine.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1vbhbZ6R2R8STWVzl4E4GTr8VUIxeX-9K

# importing libaries
# """

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

# """data collection and data processiong

# """

# loading dataset to pandas dataframe
sonar_data= pd.read_csv('/content/Copy of sonar data.csv', header=None)

sonar_data.head()

# number of row and column
# pandas.read_csv= is a function from the Pandas  library used to read data from CSV (Comma-Separated Values) files and load it into a DataFrame, which is a tabular data structure in Pandas.
sonar_data.shape

sonar_data.describe()
# this gives statistical measure of the data

sonar_data[60].value_counts()

# """M ---> Mine
# R ---> rock

# """

sonar_data.groupby(60).mean()

# separating data and labels
X = sonar_data.drop(columns=60,axis=1)
Y = sonar_data[60]

print(X)
print(Y)

# """training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state = 1)

print(X.shape, X_train.shape, X_test.shape)

# """in training data we have 187 instance
# and in test data we have 21 instance

# model training --> logistic regression
# """

model = LogisticRegression()

# training the logistic regression model with training data
model.fit(X_train, Y_train)

# """model evaluation"""

# accuracy on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(f'accuracy on training data {training_data_accuracy}')

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction , Y_test)

print(f'accuracy onj test data : {test_data_accuracy}')

# """making a predictive system"""

input_data = (0.0707,0.1252,0.1447,0.1644,0.1693,0.0844,0.0715,0.0947,0.1583,0.1247,0.2340,0.1764,0.2284,0.3115,0.4725,0.5543,0.5386,0.3746,0.4583,0.5961,0.7464,0.7644,0.5711,0.6257,0.6695,0.7131,0.7567,0.8077,0.8477,0.9289,0.9513,0.7995,0.4362,0.4048,0.4952,0.1712,0.3652,0.3763,0.2841,0.0427,0.5331,0.6952,0.4288,0.3063,0.5835,0.5692,0.2630,0.1196,0.0983,0.0374,0.0291,0.0156,0.0197,0.0135,0.0127,0.0138,0.0133,0.0131,0.0154,0.0218)
# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)
# reshape the np array as we are predicting for one instance
input_data_reshape = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshape)
print(f'; {prediction}')

if(prediction[0]=='R'):
  print('object is a rock')
else:
  print("object is a mine")



